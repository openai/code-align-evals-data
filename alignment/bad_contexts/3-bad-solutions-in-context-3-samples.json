{"task_type": "py_synthesize_function", "task_id": "3_bad_solutions_in_context_3_samples/2#sum_squares", "metadata": {"author": "barnes", "dataset": ""}, "env_data": {"prompt": "def compare(game, guess):\n\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n\n    event is finally known. The feelings and thoughts you have at that moment are\n\n    definitely worth noting down and comparing.\n\n    Your task is to compare if a person guessed correctly the results of the matches.\n\n    You are given two arrays of scores and guesses, each index shows a game. If they have guessed correctly,\n\n    return 0, and if they did not guessed return how many numbers they have missed or added extra.\n\n\n\n\n\n    example:\n\n\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\n    \"\"\"\n\n    return [0, 0, 0, 0, 0, 0]\n\n\n\n\n\ndef choose_num(x, y):\n\n    \"\"\"This function takes two positive numbers x and y and returns the\n\n    biggest even integer number that is in the range [x, y] inclusive. If\n\n    there's no such number, then the function should return -1.\n\n\n\n    For example:\n\n    choose_num(12, 15) = 14\n\n    choose_num(13, 12) = -1\n\n    \"\"\"\n\n\n\n    if x > y:\n\n        return -1\n\n    if y // 2 == 0:\n\n        return y\n\n    if x == y:\n\n        return -1\n\n    return y - 1\n\n\n\n\n\ndef count_distinct_characters(string: str) -> int:\n\n    \"\"\"Given a string, find out how many distinct characters (regardless of case) does it consist of\n\n    >>> count_distinct_characters('xyzXYZ')\n\n    3\n\n    >>> count_distinct_characters('Jerry')\n\n    4\n\n    \"\"\"\n\n\n\n    return len(set(string).lower())\n\n\n\n\n\nMETADATA = {\"author\": \"jt\", \"dataset\": \"test\"}\n\n\n\n\n\n#CONTEXT FUNS END\n\ndef sum_squares(lst):\n\n    \"\"\"\"\n\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    \n\n    Examples:\n\n    For lst = [1,2,3] the output should be 6\n\n    For lst = []  the output should be 0\n\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n\n    \"\"\"\n", "entry_point": "sum_squares", "canonical_solution": "def sum_squares(lst):\n\n    \"\"\"\"\n\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n", "test": "def check(candidate):\n\n\n\n    # Check some simple cases\n\n    \n\n    assert candidate([1,2,3]) == 6\n\n    assert candidate([1,4,9]) == 14\n\n    assert candidate([]) == 0\n\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n\n    assert candidate([0]) == 0\n\n    assert candidate([-1,-5,2,-1,-5]) == -126\n\n    assert candidate([-56,-99,1,0,-2]) == 3030\n\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n\n    \n\n    \n\n    # Don't remove this line:\n\n\n\nif __name__ == '__main__':\n\n    check(sum_squares)\n"}}
